// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	changelog "github.com/chelnak/gh-changelog/internal/changelog"
	gitclient "github.com/chelnak/gh-changelog/internal/gitclient"

	githubclient "github.com/chelnak/gh-changelog/internal/githubclient"

	mock "github.com/stretchr/testify/mock"
)

// ChangelogBuilder is an autogenerated mock type for the ChangelogBuilder type
type ChangelogBuilder struct {
	mock.Mock
}

// Build provides a mock function with given fields:
func (_m *ChangelogBuilder) Build() (changelog.Changelog, error) {
	ret := _m.Called()

	var r0 changelog.Changelog
	if rf, ok := ret.Get(0).(func() changelog.Changelog); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(changelog.Changelog)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WithFromLastVersion provides a mock function with given fields: fromLastVersion
func (_m *ChangelogBuilder) WithFromLastVersion(fromLastVersion bool) changelog.ChangelogBuilder {
	ret := _m.Called(fromLastVersion)

	var r0 changelog.ChangelogBuilder
	if rf, ok := ret.Get(0).(func(bool) changelog.ChangelogBuilder); ok {
		r0 = rf(fromLastVersion)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(changelog.ChangelogBuilder)
		}
	}

	return r0
}

// WithFromVersion provides a mock function with given fields: fromVersion
func (_m *ChangelogBuilder) WithFromVersion(fromVersion string) changelog.ChangelogBuilder {
	ret := _m.Called(fromVersion)

	var r0 changelog.ChangelogBuilder
	if rf, ok := ret.Get(0).(func(string) changelog.ChangelogBuilder); ok {
		r0 = rf(fromVersion)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(changelog.ChangelogBuilder)
		}
	}

	return r0
}

// WithGitClient provides a mock function with given fields: client
func (_m *ChangelogBuilder) WithGitClient(client gitclient.GitClient) changelog.ChangelogBuilder {
	ret := _m.Called(client)

	var r0 changelog.ChangelogBuilder
	if rf, ok := ret.Get(0).(func(gitclient.GitClient) changelog.ChangelogBuilder); ok {
		r0 = rf(client)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(changelog.ChangelogBuilder)
		}
	}

	return r0
}

// WithGitHubClient provides a mock function with given fields: client
func (_m *ChangelogBuilder) WithGitHubClient(client githubclient.GitHubClient) changelog.ChangelogBuilder {
	ret := _m.Called(client)

	var r0 changelog.ChangelogBuilder
	if rf, ok := ret.Get(0).(func(githubclient.GitHubClient) changelog.ChangelogBuilder); ok {
		r0 = rf(client)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(changelog.ChangelogBuilder)
		}
	}

	return r0
}

// WithNextVersion provides a mock function with given fields: nextVersion
func (_m *ChangelogBuilder) WithNextVersion(nextVersion string) changelog.ChangelogBuilder {
	ret := _m.Called(nextVersion)

	var r0 changelog.ChangelogBuilder
	if rf, ok := ret.Get(0).(func(string) changelog.ChangelogBuilder); ok {
		r0 = rf(nextVersion)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(changelog.ChangelogBuilder)
		}
	}

	return r0
}

// WithSpinner provides a mock function with given fields: enabled
func (_m *ChangelogBuilder) WithSpinner(enabled bool) changelog.ChangelogBuilder {
	ret := _m.Called(enabled)

	var r0 changelog.ChangelogBuilder
	if rf, ok := ret.Get(0).(func(bool) changelog.ChangelogBuilder); ok {
		r0 = rf(enabled)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(changelog.ChangelogBuilder)
		}
	}

	return r0
}

type mockConstructorTestingTNewChangelogBuilder interface {
	mock.TestingT
	Cleanup(func())
}

// NewChangelogBuilder creates a new instance of ChangelogBuilder. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewChangelogBuilder(t mockConstructorTestingTNewChangelogBuilder) *ChangelogBuilder {
	mock := &ChangelogBuilder{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
